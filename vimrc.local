set t_Co=256
color grb256
colorscheme pencil

let g:test#strategy = 'dispatch'
let g:test#javascript#mocha#file_pattern = '\v__tests__/.*\.(js|jsx|coffee)$'
let g:test#javascript#mocha#options = '--compilers js:babel-core/register --watch-extensions js,jsx,es6,es6.jsx --opts mocha.opts'

set background=light

" Keep cursor vertically centered, plucked from @gabebw!
set scrolloff=999

nnoremap <Leader>f :CtrlP<CR>
map <C-n> :NERDTreeToggle<CR>

" Indent list items correctly
set autoindent

" Don't ask me if I want to load changed files. The answer is "Yes, always"
:set autoread

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>

" leader d to run the whole spec file
nnoremap <silent> <Leader>d :TestFile --format doc<CR>
" leader c to copy the run nearest spec command to a clipboard so I can get
" better output
nnoremap <silent> <Leader>c :redir @* <bar> TestNearest <bar> redir END<CR>

nnoremap <silent> <Leader>ra :!platformio run -t upload<CR>

" airline - set theme and remove awful separators
let g:airline_theme="papercolor"
let g:airline_left_sep=''
let g:airline_right_sep=''

" Disable annoying whitespace indicator
let g:airline#extensions#whitespace#enabled=0

" Better tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#tab_min_count = 2

" Better line/column information
let g:airline_section_b = ""
let g:airline_section_z = "%#__accent_bold#%l%#__restore__#:%c"

" " Syntastic
" let g:syntastic_always_populate_loc_list = 0
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_rust_checkers = ['rustc']
" let g:syntastic_ruby_checkers = ['rubocop']
" let g:syntastic_loc_list_height = 5
"
" highlight SyntasticErrorSign guifg=white guibg=red
" highlight SyntasticWarningSign guifg=white guibg=red
" highlight SyntasticStyleErrorSign guifg=white guibg=red
" highlight SyntasticStyleWarningSign guifg=white guibg=red
"
" let g:syntastic_error_symbol = 'X'
" let g:syntastic_warning_symbol = '?'
" let g:syntastic_style_error_symbol = 'X'
" let g:syntastic_style_warning_symbol = '?'

" ALE
let g:ale_sign_error = '!'
let g:ale_sign_warning = '?'
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

set statusline+=%{ALEGetStatusLine()}

" GitGutter
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_modified_removed = '<'

highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

" copypasta fix for sierra
set clipboard=unnamed

" Open the current line in github's UI
nnoremap <Leader>gc :Gblame<CR><C-W>h:Gbrowse <C-R><C-W><CR>:q<CR>

" Fuzzyfind
nnoremap <Leader>f :FZF<CR>

" Show syntax highlighting groups for word under cursor
nmap <C-Y> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" add jbuilder syntax highlighting
au BufNewFile,BufRead *.json.jbuilder set ft=ruby
